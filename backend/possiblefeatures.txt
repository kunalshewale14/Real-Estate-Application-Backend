Possible Feature Additions:
Profile Page:

Allow users to update their username, email, and password.
Option to upload a profile picture.
Image Deletion:

Add a delete button for each uploaded image so users can remove them.
Image Captions & Titles:

Allow users to add a caption or title when uploading an image.
Download Images:

Provide an option to download images.
Pagination for Images:

If a user has many images, show them in pages (e.g., 10 images per page).
Logout Functionality:

Add a Logout button to clear the JWT token and redirect users to the login page.
Dark Mode Theme Toggle:

Let users switch between light and dark themes.
Like & Comment System:

Users can like or comment on uploaded images.
Forgot Password Feature:

Implement password reset using email verification.
Public & Private Images:

Allow users to choose whether an image is public or private.
Show public images on a separate page where other users can view them.


-------------------------------------------------


Task Title: Real Estate Property Management Web Application
 Objective
Design and develop a full-stack web application using the MERN or MEAN stack that allows
users to manage real estate properties. This task is designed to evaluate your skills in
backend and frontend development, RESTful API design, JWT-based authentication, and
full-stack integration.
 Project Requirements
 User Authentication
‚Ä¢ Implement user signup and login functionality.
‚Ä¢ Secure the application using JWT (JSON Web Tokens) for authentication.
‚Ä¢ Use protected routes to ensure only logged-in users can perform certain actions.
‚Ä¢ Implement logout functionality on the frontend (by clearing the token).
 Property Management
 Authenticated users should be able to:

‚Ä¢ Search the property
‚Ä¢ Add a new property listing
‚Ä¢ Delete their own property listings
Property attributes should include:
‚Ä¢ Title
‚Ä¢ Description
‚Ä¢ Location
‚Ä¢ Price
‚Ä¢ Image URL (use a placeholder or upload service)
Implement a search feature to filter properties by:
‚Ä¢ Title or Location

**Tech stack :

Layer                             Techonology options 
frontend-end             react (with Hooks , functional components)
backend                          Nodejs + Express JS
database                        MongoDB + Mongoose
Authentication                      jwt
Styling                             css 
HTTP requests                      Axios 
Environment                        dotenv

-------------------------
# Real‚ÄëEstate Property Management App (MERN stack)

Below is a **full runnable project** with minimal yet complete code for the requirements you gave (JWT auth, search/add/delete property, React hooks, Axios, dotenv).
Copy the folders as‚Äëis, run `npm install` inside both **server** and **client**, create a real `.env`, then `npm run dev` (server) and `npm run dev` (client).

---

## üìÇ Folder tree

```
real-estate-app/
‚îú‚îÄ server/
‚îÇ  ‚îú‚îÄ package.json
‚îÇ  ‚îú‚îÄ .env.example
‚îÇ  ‚îú‚îÄ server.js
‚îÇ  ‚îú‚îÄ config/db.js
‚îÇ  ‚îú‚îÄ models/
‚îÇ  ‚îÇ  ‚îú‚îÄ User.js
‚îÇ  ‚îÇ  ‚îî‚îÄ Property.js
‚îÇ  ‚îú‚îÄ middleware/auth.js
‚îÇ  ‚îî‚îÄ routes/
‚îÇ     ‚îú‚îÄ auth.js
‚îÇ     ‚îî‚îÄ properties.js
‚îî‚îÄ client/
   ‚îú‚îÄ package.json
   ‚îú‚îÄ vite.config.js
   ‚îú‚îÄ index.html
   ‚îî‚îÄ src/
      ‚îú‚îÄ main.jsx
      ‚îú‚îÄ App.jsx
      ‚îú‚îÄ api/axios.js
      ‚îú‚îÄ context/AuthContext.jsx
      ‚îú‚îÄ components/
      ‚îÇ  ‚îú‚îÄ Navbar.jsx
      ‚îÇ  ‚îú‚îÄ PropertyCard.jsx
      ‚îÇ  ‚îî‚îÄ (inline PrivateRoute in App)
      ‚îî‚îÄ pages/
         ‚îú‚îÄ Login.jsx
         ‚îú‚îÄ Register.jsx
         ‚îú‚îÄ Dashboard.jsx
         ‚îî‚îÄ AddProperty.jsx
```

---

## üîß Back‚Äëend (Node + Express)

### **server/package.json**

```json
{
  "name": "real-estate-server",
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js"
  },
  "dependencies": {
    "bcryptjs": "^2.4.3",
    "cors": "^2.8.5",
    "dotenv": "^16.4.5",
    "express": "^4.19.0",
    "jsonwebtoken": "^9.0.2",
    "mongoose": "^8.4.0"
  },
  "devDependencies": { "nodemon": "^3.1.0" }
}
```

### **server/.env.example**

```env
PORT=5000
MONGO_URI=mongodb://localhost:27017/realestate
JWT_SECRET=supersecretkey
```

### **server/config/db.js**

```js
import mongoose from 'mongoose';

const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGO_URI);
    console.log('MongoDB connected');
  } catch (err) {
    console.error(err.message);
    process.exit(1);
  }
};

export default connectDB;
```

### **server/models/User.js**

```js
import mongoose from 'mongoose';
import bcrypt from 'bcryptjs';

const userSchema = new mongoose.Schema({
  name: { type: String, required: true },
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true }
});

userSchema.pre('save', async function (next) {
  if (!this.isModified('password')) return next();
  const salt = await bcrypt.genSalt(10);
  this.password = await bcrypt.hash(this.password, salt);
  next();
});

userSchema.methods.matchPassword = async function (entered) {
  return await bcrypt.compare(entered, this.password);
};

export default mongoose.model('User', userSchema);
```

### **server/models/Property.js**

```js
import mongoose from 'mongoose';

const propertySchema = new mongoose.Schema(
  {
    title: { type: String, required: true },
    description: String,
    location: { type: String, required: true },
    price: { type: Number, required: true },
    imageUrl: String,
    owner: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true }
  },
  { timestamps: true }
);

export default mongoose.model('Property', propertySchema);
```

### **server/middleware/auth.js**

```js
import jwt from 'jsonwebtoken';
import User from '../models/User.js';

const protect = async (req, _res, next) => {
  const token = req.headers.authorization?.split(' ')[1];
  if (!token) return _res.status(401).json({ message: 'Not authorized' });
  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = await User.findById(decoded.id).select('-password');
    next();
  } catch {
    _res.status(401).json({ message: 'Token invalid' });
  }
};

export default protect;
```

### **server/routes/auth.js**

```js
import express from 'express';
import jwt from 'jsonwebtoken';
import User from '../models/User.js';

const router = express.Router();
const genToken = id => jwt.sign({ id }, process.env.JWT_SECRET, { expiresIn: '7d' });

router.post('/register', async (req, res) => {
  const { name, email, password } = req.body;
  try {
    if (await User.findOne({ email })) return res.status(400).json({ message: 'User exists' });
    const user = await User.create({ name, email, password });
    res.status(201).json({ _id: user._id, name, email, token: genToken(user._id) });
  } catch (e) {
    res.status(500).json({ message: e.message });
  }
});

router.post('/login', async (req, res) => {
  const { email, password } = req.body;
  try {
    const user = await User.findOne({ email });
    if (!user || !(await user.matchPassword(password))) return res.status(401).json({ message: 'Invalid creds' });
    res.json({ _id: user._id, name: user.name, email, token: genToken(user._id) });
  } catch (e) {
    res.status(500).json({ message: e.message });
  }
});

export default router;
```

### **server/routes/properties.js**

```js
import express from 'express';
import Property from '../models/Property.js';
import protect from '../middleware/auth.js';

const router = express.Router();

// search list
router.get('/', async (req, res) => {
  const key = req.query.search;
  const filter = key
    ? { $or: [ { title: { $regex: key, $options: 'i' } }, { location: { $regex: key, $options: 'i' } } ] }
    : {};
  res.json(await Property.find(filter).populate('owner', 'name email'));
});

// add
router.post('/', protect, async (req, res) => {
  const { title, description, location, price, imageUrl } = req.body;
  res.status(201).json(await Property.create({ title, description, location, price, imageUrl, owner: req.user._id }));
});

// delete
router.delete('/:id', protect, async (req, res) => {
  const prop = await Property.findById(req.params.id);
  if (!prop) return res.status(404).json({ message: 'Not found' });
  if (prop.owner.toString() !== req.user._id.toString()) return res.status(401).json({ message: 'Not yours' });
  await prop.deleteOne();
  res.json({ message: 'Deleted' });
});

export default router;
```

### **server/server.js**

```js
import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import connectDB from './config/db.js';
import authRoutes from './routes/auth.js';
import propRoutes from './routes/properties.js';

dotenv.config();
connectDB();

const app = express();
app.use(cors());
app.use(express.json());

app.use('/api/auth', authRoutes);
app.use('/api/properties', propRoutes);

app.get('/', (_req, res) => res.send('API running'));

app.listen(process.env.PORT || 5000, () => console.log('Server started'));
```

---

## üñ•Ô∏è Front‚Äëend (React + Vite)

### **client/package.json**

```json
{
  "name": "real-estate-client",
  "version": "1.0.0",
  "scripts": { "dev": "vite", "build": "vite build", "preview": "vite preview" },
  "dependencies": {
    "axios": "^1.8.0",
    "jwt-decode": "^4.0.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-router-dom": "^6.23.0"
  },
  "devDependencies": { "@vitejs/plugin-react": "^4.2.0", "vite": "^5.1.0" }
}
```

### **client/vite.config.js**

```js
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
export default defineConfig({ plugins: [react()], server: { port: 3000 } });
```

### **client/index.html**

```html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Real Estate Manager</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
```

### **client/src/main.jsx**

```jsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom';
import App from './App';
import { AuthProvider } from './context/AuthContext';

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <BrowserRouter>
      <AuthProvider>
        <App />
      </AuthProvider>
    </BrowserRouter>
  </React.StrictMode>
);
```

### **client/src/api/axios.js**

```js
import axios from 'axios';
const api = axios.create({ baseURL: 'http://localhost:5000/api' });
api.interceptors.request.use(cfg => {
  const t = localStorage.getItem('token');
  if (t) cfg.headers.Authorization = `Bearer ${t}`;
  return cfg;
});
export default api;
```

### **client/src/context/AuthContext.jsx**

```jsx
import React, { createContext, useState, useEffect } from 'react';
import jwtDecode from 'jwt-decode';
export const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  useEffect(() => {
    const t = localStorage.getItem('token');
    if (t) setUser(jwtDecode(t));
  }, []);
  const login = t => { localStorage.setItem('token', t); setUser(jwtDecode(t)); };
  const logout = () => { localStorage.removeItem('token'); setUser(null); };
  return <AuthContext.Provider value={{ user, login, logout }}>{children}</AuthContext.Provider>;
};
```

### **client/src/App.jsx**

```jsx
import React, { useContext } from 'react';
import { Routes, Route, Navigate } from 'react-router-dom';
import Navbar from './components/Navbar';
import Login from './pages/Login';
import Register from './pages/Register';
import Dashboard from './pages/Dashboard';
import AddProperty from './pages/AddProperty';
import { AuthContext } from './context/AuthContext';

const Private = ({ children }) => {
  const { user } = useContext(AuthContext);
  return user ? children : <Navigate to="/login" />;
};

const App = () => (
  <>
    <Navbar />
    <Routes>
      <Route path="/" element={<Dashboard />} />
      <Route path="/login" element={<Login />} />
      <Route path="/register" element={<Register />} />
      <Route path="/add" element={<Private><AddProperty /></Private>} />
    </Routes>
  </>
);
export default App;
```

### **client/src/components/Navbar.jsx**

```jsx
import React, { useContext } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { AuthContext } from '../context/AuthContext';

const Navbar = () => {
  const { user, logout } = useContext(AuthContext);
  const nav = useNavigate();
  return (
    <nav style={{ gap: '1rem', display: 'flex' }}>
      <h3>Real Estate</h3>
      <Link to="/">Home</Link>
      {user ? (
        <>
          <Link to="/add">Add</Link>
          <button onClick={() => { logout(); nav('/'); }}>Logout</button>
        </>
      ) : (
        <>
          <Link to="/login">Login</Link>
          <Link to="/register">Signup</Link>
        </>
      )}
    </nav>
  );
};
export default Navbar;
```

### **client/src/pages/Login.jsx**

```jsx
import React, { useState, useContext } from 'react';
import api from '../api/axios';
import { AuthContext } from '../context/AuthContext';
import { useNavigate } from 'react-router-dom';

export default function Login() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const { login } = useContext(AuthContext);
  const nav = useNavigate();
  const submit = async e => {
    e.preventDefault();
    try {
      const { data } = await api.post('/auth/login', { email, password });
      login(data.token);
      nav('/');
    } catch (e) { alert(e.response?.data?.message || e.message); }
  };
  return (
    <form onSubmit={submit}>
      <h2>Login</h2>
      <input value={email} onChange={e=>setEmail(e.target.value)} placeholder="Email" required />
      <input type="password" value={password} onChange={e=>setPassword(e.target.value)} placeholder="Password" required />
      <button>Login</button>
    </form>
  );
}
```

### **client/src/pages/Register.jsx**

```jsx
import React, { useState, useContext } from 'react';
import api from '../api/axios';
import { AuthContext } from '../context/AuthContext';
import { useNavigate } from 'react-router-dom';

export default function Register() {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const { login } = useContext(AuthContext);
  const nav = useNavigate();
  const submit = async e => {
    e.preventDefault();
    try {
      const { data } = await api.post('/auth/register', { name, email, password });
      login(data.token);
      nav('/');
    } catch (e) { alert(e.response?.data?.message || e.message); }
  };
  return (
    <form onSubmit={submit}>
      <h2>Signup</h2>
      <input value={name} onChange={e=>setName(e.target.value)} placeholder="Name" required />
      <input value={email} onChange={e=>setEmail(e.target.value)} placeholder="Email" required />
      <input type="password" value={password} onChange={e=>setPassword(e.target.value)} placeholder="Password" required />
      <button>Register</button>
    </form>
  );
}
```

### **client/src/pages/Dashboard.jsx**

```jsx
import React, { useState, useEffect } from 'react';
import api from '../api/axios';
import PropertyCard from '../components/PropertyCard';

export default function Dashboard() {
  const [props, setProps] = useState([]);
  const [search, setSearch] = useState('');
  const load = async () => {
    const { data } = await api.get(`/properties?search=${search}`);
    setProps(data);
  };
  useEffect(() => { load(); }, [search]);
  return (
    <div>
      <input value={search} onChange={e=>setSearch(e.target.value)} placeholder="Search title or location" />
      {props.map(p => <PropertyCard key={p._id} property={p} refresh={load} />)}
    </div>
  );
}
```

### **client/src/components/PropertyCard.jsx**

```jsx
import React, { useContext } from 'react';
import api from '../api/axios';
import { AuthContext } from '../context/AuthContext';

const PropertyCard = ({ property, refresh }) => {
  const { user } = useContext(AuthContext);
  const canDel = user && user.id === property.owner._id;
  const del = async () => {
    if (!canDel || !window.confirm('Delete?')) return;
    await api.delete(`/properties/${property._id}`);
    refresh();
  };
  return (
    <div style={{ border:'1px solid #ccc', margin:'1rem', padding:'1rem' }}>
      <img src={property.imageUrl || 'https://via.placeholder.com/150'} width="150" />
      <h4>{property.title}</h4>
      <p>{property.location} ‚Äî ‚Çπ{property.price}</p>
      {canDel && <button onClick={del}>Delete</button>}
    </div>
  );
};
export default PropertyCard;
```

### **client/src/pages/AddProperty.jsx**

```jsx
import React, { useState } from 'react';
import api from '../api/axios';
import { useNavigate } from 'react-router-dom';

export default function AddProperty() {
  const [f, setF] = useState({ title:'', description:'', location:'', price:'', imageUrl:'' });
  const nav = useNavigate();
  const ch = e => setF({ ...f, [e.target.name]: e.target.value });
  const sub = async e => {
    e.preventDefault();
    await api.post('/properties', { ...f, price: Number(f.price) });
    nav('/');
  };
  return (
    <form onSubmit={sub}>
      <h2>Add Property</h2>
      <input name="title" value={f.title} onChange={ch} placeholder="Title" required />
      <input name="description" value={f.description} onChange={ch} placeholder="Description" />
      <input name="location" value={f.location} onChange={ch} placeholder="Location" required />
      <input name="price" type="number" value={f.price} onChange={ch} placeholder="Price" required />
      <input name="imageUrl" value={f.imageUrl} onChange={ch} placeholder="Image URL" />
      <button>Add</button>
    </form>
  );
}
```

---

## üèÉ‚Äç‚ôÇÔ∏è Quick start

```bash
# backend
cd real-estate-app/server
cp .env.example .env   # edit values
npm install
npm run dev

# frontend (new terminal)
cd ../client
npm install
npm run dev
```

The React app runs on **[http://localhost:3000](http://localhost:3000)** and talks to the API on **[http://localhost:5000](http://localhost:5000)**.

Enjoy hacking! üéâ
